on:
  push:
    paths-ignore:
      - 'README.md'
  release:
    types: [published]

name: Cotevalentines2023 CI/CD
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_matrix:
    strategy:
      matrix:
        # Maybe we want to have executables for all platforms just to test this?
        os: [ubuntu-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            C:\Users\runneradmin\.cargo\bin
            C:\Users\runneradmin\.cargo\registry\index
            C:\Users\runneradmin\.cargo\registry\cache
            C:\Users\runneradmin\.cargo\git\db
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Consider replacing because of https://github.com/actions-rs/cargo/issues/216
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - shell: bash
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mkdir bin
          mv ./target/release/cotevalentines ./bin/cotevalentines-${{ runner.os }}

      - shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          mkdir bin
          mv ./target/release/cotevalentines.exe ./bin/cotevalentines-${{ runner.os }}.exe

      - name: Run UPX
        uses: crazy-max/ghaction-upx@v2
        continue-on-error: true
        if: matrix.os != 'windows-latest' || matrix.os != 'macOS-latest'
        with:
          version: latest
          files: |
            ./bin/cotevalentines-${{ runner.os }}
          # args: -fq

      - uses: actions/upload-artifact@v3
        name: Upload Binary
        with:
          name: Cotevalentines2023-${{ runner.os }}
          path: ./bin/cotevalentines*
      - uses: softprops/action-gh-release@v1
        continue-on-error: true
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./bin/cotevalentines*
  build_docker_image:
    runs-on: ubuntu-latest
    needs: build_matrix
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/docker'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        name: Download release artifact
        with:
          name: Cotevalentines2023-Linux
          path: ./docker

      - shell: bash
        name: Copy Dockerfile
        run: |
          cp ./Dockerfile ./docker
          mv ./docker/cotevalentines-Linux ./docker/cotevalentines
          ls -lahR ./docker

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          push: ${{ github.event_name != 'pull_request' || github.ref == 'refs/heads/release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
